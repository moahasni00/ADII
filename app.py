# Import required libraries
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from scipy import stats
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from statsmodels.stats.outliers_influence import variance_inflation_factor
from io import BytesIO
import time

# Page configuration
st.set_page_config(
    page_title="ADII Digital Transformation Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
# Add this to your custom CSS
st.markdown("""
<style>
    /* Tab titles */
    .stTabs [data-baseweb="tab"] {
        font-size: 1.2rem;
        font-weight: 600;
        padding: 1rem 1.5rem;
    }
    
    /* Headers */
    h1 {
        font-size: 2.5rem;
        margin-bottom: 1.5rem;
    }
    
    h2 {
        font-size: 2rem;
        margin: 1rem 0;
    }
    
    h3 {
        font-size: 1.5rem;
        margin: 0.8rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Complete variable dictionary
var_dict = {
    'ADT': {
        'full_name': 'Adoption de la Transformation Digitale',
        'description': 'Mesure le niveau d\'adoption des outils num√©riques',
        'items': {
            'ADT_1': 'Utilisation r√©guli√®re des outils num√©riques',
            'ADT_2': 'Int√©gration dans le travail quotidien',
            'ADT_3': 'Adaptation aux nouveaux outils',
            'ADT_4': 'Participation aux formations digitales'
        }
    },
    'INT': {
        'full_name': 'Intention d\'Utilisation',
        'description': '√âvalue la volont√© d\'utiliser les outils num√©riques',
        'items': {
            'INT_1': 'Intention d\'utilisation future',
            'INT_2': 'Planification d\'utilisation',
            'INT_3': 'Recommandation aux coll√®gues',
            'INT_4': 'Engagement dans la transformation'
        }
    },
    'SAT': {
        'full_name': 'Satisfaction Utilisateur',
        'description': '√âvalue la satisfaction globale des utilisateurs',
        'items': {
            'SAT_1': 'Satisfaction g√©n√©rale',
            'SAT_2': 'R√©ponse aux besoins',
            'SAT_3': 'Facilit√© d\'utilisation',
            'SAT_4': 'Recommandation √† d\'autres'
        }
    },
    'FOR': {
        'full_name': 'Formation et Support',
        'description': '√âvalue la qualit√© de la formation et du support',
        'items': {
            'FOR_1': 'Qualit√© des formations',
            'FOR_2': 'Disponibilit√© du support',
            'FOR_3': 'Clart√© des guides',
            'FOR_4': 'Suivi post-formation'
        }
    },
    'RE': {
        'full_name': 'R√©sistance au Changement',
        'description': 'Mesure le niveau de r√©sistance au changement',
        'items': {
            'RE_1': 'Appr√©hension au changement',
            'RE_2': 'Pr√©f√©rence anciens syst√®mes',
            'RE_3': 'Difficult√© d\'adaptation',
            'RE_4': 'Stress li√© au changement'
        }
    },
    'PE': {
        'full_name': 'Performance Attendue',
        'description': '√âvalue les attentes en termes de performance',
        'items': {
            'PE_1': 'Am√©lioration de la productivit√©',
            'PE_2': 'Efficacit√© accrue',
            'PE_3': 'Qualit√© du travail',
            'PE_4': 'R√©duction des erreurs'
        }
    },
    'EE': {
        'full_name': 'Effort Attendu',
        'description': 'Mesure l\'effort per√ßu pour l\'utilisation',
        'items': {
            'EE_1': 'Facilit√© d\'apprentissage',
            'EE_2': 'Clart√© d\'utilisation',
            'EE_3': 'Flexibilit√©',
            'EE_4': 'Ma√Ætrise rapide'
        }
    },
    'FC': {
        'full_name': 'Conditions Facilitantes',
        'description': '√âvalue le support et les ressources disponibles',
        'items': {
            'FC_1': 'Support technique disponible',
            'FC_2': 'Ressources n√©cessaires',
            'FC_3': 'Compatibilit√© syst√®mes',
            'FC_4': 'Aide √† disposition'
        }
    },
    'SI': {
        'full_name': 'Influence Sociale',
        'description': 'Mesure l\'impact de l\'environnement social',
        'items': {
            'SI_1': 'Encouragement des coll√®gues',
            'SI_2': 'Support de la direction',
            'SI_3': 'Culture d\'innovation',
            'SI_4': 'Reconnaissance des efforts'
        }
    }
}

# Utility functions
@st.cache_data
# Load data with validation
def load_and_validate_data():
    try:
        df = pd.read_csv('Donn_es_simul_es_ADII.csv', sep=';')
        if df is not None:
            # Remove duplicates
            df = df.drop_duplicates()
            
            # Handle missing values
            df = df.fillna(df.mean(numeric_only=True))
            
            # Validate value ranges
            for col in df.select_dtypes(include=['float64', 'int64']).columns:
                df[col] = df[col].clip(1, 5)  # Assuming 1-5 scale
        return df
    except FileNotFoundError:
        st.error("‚ùå Le fichier de donn√©es n'a pas √©t√© trouv√©. Veuillez v√©rifier le chemin d'acc√®s.")
        return None
    except Exception as e:
        st.error(f"‚ùå Une erreur s'est produite lors du chargement des donn√©es: {str(e)}")
        return None

# Load and validate data
with st.spinner('Chargement des donn√©es...'):
    df = load_and_validate_data()

# Check if data is loaded successfully before proceeding
if df is not None:
    # Sidebar navigation
    st.sidebar.title('Navigation')
    
    # Help section in sidebar
    with st.sidebar:
        with st.expander('‚ùì Aide & Guide d\'Utilisation'):
            st.markdown("""
            ### üìö Comment utiliser l'application:
            1. **Navigation**: Utilisez les onglets pour acc√©der aux diff√©rentes analyses
            2. **Interactivit√©**: S√©lectionnez les variables et dimensions √† analyser
            3. **Visualisation**: Explorez les graphiques interactifs
            4. **Export**: T√©l√©chargez les r√©sultats dans diff√©rents formats
            
            ### üîç Astuces:
            - Survolez les graphiques pour plus de d√©tails
            - Utilisez les filtres pour affiner l'analyse
            - Consultez les interpr√©tations pour chaque analyse
            """)
    
    # Main content tabs
    tab_accueil, tab_univarie, tab_bivarie, tab_correlations, tab_preparation, tab_regression, tab_synthese = st.tabs([
        'üìå Accueil',
        'üìä Analyse Univari√©e',
        'üîÑ Analyse Bivari√©e',
        'üîó Corr√©lations',
        'üõ†Ô∏è Pr√©paration',
        'üìê R√©gression',
        'üéØ Synth√®se'
    ])
    
    # Tab 1: Home
    with tab_accueil:
        st.title('üìä Tableau de Bord de la Transformation Digitale ADII')
        
        st.markdown("""
        ## üéØ Projet : Application Streamlit ‚Äì Analyse des donn√©es d'enqu√™te sur la digitalisation √† l'ADII
        
        Cette application permet d'analyser en d√©tail les r√©sultats de l'enqu√™te sur la transformation digitale √† l'ADII.
        Elle offre une vue compl√®te des diff√©rentes dimensions √©valu√©es et permet d'identifier les points forts et les axes
        d'am√©lioration.
        
        ### üîë Points Cl√©s:
        - Analyse multidimensionnelle de la transformation digitale
        - Visualisations interactives des r√©sultats
        - Recommandations personnalis√©es bas√©es sur les donn√©es
        - Export des r√©sultats dans diff√©rents formats
        """)
        
        st.markdown("### üéØ Structure du Questionnaire")
        
        for var_key, var_info in var_dict.items():
            with st.expander(f"üìå {var_info['full_name']}"):
                st.markdown(f"**Description:** {var_info['description']}")
                
                var_cols = [f"{var_key}_{i}" for i in range(1, 5)]
                mean_score = calculate_mean_score(df, var_cols)
                
                if mean_score is not None:
                    color = 'red' if mean_score < 2.5 else 'green' if mean_score > 3.5 else 'orange'
                    st.markdown(f"**Score Moyen:** <span style='color:{color}'>{mean_score:.2f}/5</span>", unsafe_allow_html=True)
                    
                    st.markdown("#### Questions Associ√©es:")
                    for code, question in var_info['items'].items():
                        st.markdown(f"- **{code}:** {question}")
                    
                    try:
                        scores = df[var_cols].mean(axis=1)
                        fig = px.histogram(
                            scores,
                            title=f'Distribution des Scores - {var_info["full_name"]}',
                            labels={'value': 'Score Moyen', 'count': 'Fr√©quence'},
                            color_discrete_sequence=['#3498db'],
                            nbins=20
                        )
                        fig.update_layout(
                            plot_bgcolor='white',
                            paper_bgcolor='white',
                            margin=dict(t=40, l=0, r=0, b=0)
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    except Exception as e:
                        st.error("Erreur lors de la cr√©ation du graphique.")
    
    # Tab 2: Univariate Analysis
    with tab_univarie:
        st.header('üìä Analyse Descriptive Univari√©e')
        
        with st.expander('üë• Analyse des Profils', expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                fig = px.pie(df, names='Profil', title='R√©partition par Profil')
                st.plotly_chart(fig)
            
            with col2:
                st.markdown("""
                #### üí° Interpr√©tation
                - Visualisation de la distribution des profils
                - Identification des groupes majoritaires et minoritaires
                - Impact potentiel sur l'adoption digitale
                """)
        
        with st.expander('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Distribution par Sexe', expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                fig = px.pie(
                    df,
                    names='Sexe',
                    title='R√©partition par Sexe',
                    color_discrete_sequence=['#FF69B4', '#4169E1']
                )
                st.plotly_chart(fig)
            
            with col2:
                st.markdown("""
                #### üí° Interpr√©tation
                - Analyse de la parit√© homme-femme
                - Implications pour les strat√©gies d'inclusion
                """)
        
        with st.expander('üéì Niveau d\'√âtudes', expanded=True):
            diplome_counts = df['Diplome'].value_counts().reset_index()
            diplome_counts.columns = ['Diplome', 'Count']
            fig = px.bar(
                diplome_counts,
                x='Diplome',
                y='Count',
                title='Distribution des Niveaux d\'√âtudes',
                labels={'Diplome': 'Dipl√¥me', 'Count': 'Nombre'},
                color_discrete_sequence=['#2ecc71']
            )
            st.plotly_chart(fig)
            
            st.markdown("""
            #### üí° Interpr√©tation
            - R√©partition des niveaux d'√©ducation
            - Corr√©lation potentielle avec l'adoption digitale
            """)
    
    # Tab 3: Bivariate Analysis
    with tabs[2]:
        st.header('üîÑ Analyse Bivari√©e')
        
        col1, col2 = st.columns(2)
        with col1:
            var1 = st.selectbox(
                'Variable 1',
                [item for var in var_dict.values() for item in var['items'].keys()]
            )
        with col2:
            var2 = st.selectbox(
                'Variable 2',
                [item for var in var_dict.values() for item in var['items'].keys()],
                index=1
            )
        
        if var1 and var2:
            fig = px.scatter(
                df,
                x=var1,
                y=var2,
                title=f'Relation entre {var1} et {var2}',
                trendline='ols'
            )
            st.plotly_chart(fig)
            
            stats_results = perform_advanced_analysis(df, var1, var2)
            if stats_results:
                with st.expander('üìä Analyse Statistique D√©taill√©e'):
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric('Corr√©lation', f"{stats_results['correlation']:.3f}")
                    with col2:
                        st.metric('P-value', f"{stats_results['p_value']:.3f}")
                    with col3:
                        st.metric('T-statistic', f"{stats_results['t_stat']:.3f}")
                    
                    insights = generate_insights(stats_results, var1, var2)
                    st.markdown("### üí° Interpr√©tation")
                    for insight in insights:
                        st.markdown(f"- {insight}")
    
    # Tab 4: Correlation Analysis
    with tabs[3]:
        st.header('üîó Analyse des Corr√©lations')
        
        dimensions = list(var_dict.keys())
        selected_dims = st.multiselect(
            'S√©lectionnez les dimensions √† analyser',
            dimensions,
            default=dimensions[:3]
        )
        
        if selected_dims:
            dim_cols = [f"{dim}_{i}" for dim in selected_dims for i in range(1, 5)]
            corr_matrix = df[dim_cols].corr()
            
            fig = px.imshow(
                corr_matrix,
                title='Matrice de Corr√©lation entre Dimensions',
                color_continuous_scale='RdBu_r',
                aspect='auto'
            )
            fig.update_layout(height=600, margin=dict(t=50, b=0))
            st.plotly_chart(fig, use_container_width=True)
            
            with st.expander('üìö Guide d\'Interpr√©tation des Corr√©lations'):
                st.markdown("""
                #### üéØ Comment interpr√©ter les corr√©lations:
                
                | Valeur | Interpr√©tation |
                |---------|----------------|
                | 1.0 | Corr√©lation positive parfaite |
                | 0.7 √† 0.9 | Corr√©lation positive forte |
                | 0.4 √† 0.6 | Corr√©lation positive mod√©r√©e |
                | 0.1 √† 0.3 | Corr√©lation positive faible |
                | 0 | Aucune corr√©lation |
                | -0.3 √† -0.1 | Corr√©lation n√©gative faible |
                | -0.6 √† -0.4 | Corr√©lation n√©gative mod√©r√©e |
                | -0.9 √† -0.7 | Corr√©lation n√©gative forte |
                | -1.0 | Corr√©lation n√©gative parfaite |
                """)
    
    # Tab 5: Data Preparation
    with tabs[4]:
        st.header('üõ†Ô∏è Pr√©paration des Donn√©es')
        
        encoders = {}
        encoded_df = df.copy()
        
        with st.expander('üîÑ Encodage des Variables Cat√©gorielles', expanded=True):
            for col in ['Profil', 'Sexe', 'Diplome']:
                le = LabelEncoder()
                encoded_df[f'{col}_encoded'] = le.fit_transform(df[col])
                encoders[col] = le
                
                st.markdown(f"#### {col}:")
                for i, label in enumerate(le.classes_):
                    st.markdown(f"- {label}: {i}")
    
    # Tab 6: Linear Regression
    with tabs[5]:
        st.header('üìê R√©gression Lin√©aire')
        
        st.markdown("""
        <style>
            .tooltip {
                position: relative;
                display: inline-block;
                border-bottom: 1px dotted black;
            }
            .tooltip .tooltiptext {
                visibility: hidden;
                width: 120px;
                background-color: black;
                color: #fff;
                text-align: center;
                border-radius: 6px;
                padding: 5px 0;
                position: absolute;
                z-index: 1;
                bottom: 100%;
                left: 50%;
                margin-left: -60px;
            }
            .tooltip:hover .tooltiptext {
                visibility: visible;
            }
        </style>
        """, unsafe_allow_html=True)
        st.markdown("### üìä S√©lection des Variables")
        target_var = st.selectbox(
            "Variable √† pr√©dire",
            options=[item for var in var_dict.values() for item in var['items'].keys()]
        )
        
        features = st.multiselect(
            "Variables explicatives",
            options=[col for col in encoded_df.columns if col.endswith('_encoded')],
            default=[col for col in encoded_df.columns if col.endswith('_encoded')][:3]
        )
        
        if features and target_var:
            X = encoded_df[features]
            y = df[target_var]
            
            model = LinearRegression()
            model.fit(X, y)
            y_pred = model.predict(X)
            
            with st.expander('üìä R√©sultats du Mod√®le', expanded=True):
                r2 = r2_score(y, y_pred)
                st.metric("R¬≤ Score", f"{r2:.3f}")
                
                coef_df = pd.DataFrame({
                    'Variable': features,
                    'Coefficient': model.coef_
                })
                
                fig = px.bar(
                    coef_df,
                    x='Variable',
                    y='Coefficient',
                    title='Coefficients de R√©gression',
                    color='Coefficient',
                    color_continuous_scale='RdBu'
                )
                st.plotly_chart(fig)
                
                st.markdown("""
                #### üí° Interpr√©tation
                - Les coefficients positifs indiquent une influence positive
                - Les coefficients n√©gatifs indiquent une influence n√©gative
                - L'amplitude indique la force de l'influence
                """)
    
    # Tab 7: Synthesis
    with tabs[6]:
        st.header('üéØ Synth√®se et Recommandations')
        
        dimension_scores = {}
        for var_key, var_info in var_dict.items():
            var_cols = [f"{var_key}_{i}" for i in range(1, 5)]
            dimension_scores[var_info['full_name']] = df[var_cols].mean().mean()
        
        categories = list(dimension_scores.keys())
        values = list(dimension_scores.values())
        
        fig = go.Figure()
        fig.add_trace(go.Scatterpolar(
            r=values + [values[0]],
            theta=categories + [categories[0]],
            fill='toself',
            name='Scores Moyens'
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 5]
                )
            ),
            showlegend=False,
            title='Vue d\'Ensemble de la Transformation Digitale'
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        with st.expander('üìã Recommandations D√©taill√©es', expanded=True):
            strengths = {k: v for k, v in dimension_scores.items() if v >= 3.5}
            improvements = {k: v for k, v in dimension_scores.items() if v < 3.5}
            
            if strengths:
                st.markdown("### üí™ Points Forts")
                for dim, score in strengths.items():
                    st.markdown(f"**{dim}** (Score: {score:.2f}/5)")
                    st.markdown("- Maintenir les bonnes pratiques actuelles")
                    st.markdown("- Partager les succ√®s avec d'autres √©quipes")
            
            if improvements:
                st.markdown("### üéØ Axes d'Am√©lioration")
                for dim, score in improvements.items():
                    st.markdown(f"**{dim}** (Score: {score:.2f}/5)")
                    st.markdown("- Identifier les obstacles sp√©cifiques")
                    st.markdown("- Mettre en place des formations cibl√©es")
                    st.markdown("- √âtablir un plan d'action d√©taill√©")
        
        st.markdown("### üì• Export des R√©sultats")
        export_results(df, dimension_scores)

    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center'>
        <p>üìä Tableau de Bord de la Transformation Digitale ADII | Version 1.0</p>
        <p><em>D√©velopp√© avec Streamlit et Python</em></p>
        <p>Pour toute question ou suggestion: <a href='mailto:contact@adii.gov.ma'>contact@adii.gov.ma</a></p>
    </div>
    """, unsafe_allow_html=True)

def add_download_button(fig, filename):
    img_bytes = fig.to_image(format="png")
    st.download_button(
        label="üì• T√©l√©charger le graphique",
        data=img_bytes,
        file_name=filename,
        mime="image/png"
    )

st.markdown("""
<script>
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.key === 'ArrowRight') {
            // Next tab
            const nextTab = document.querySelector('[data-baseweb="tab"]:not([aria-selected="true"])');
            if (nextTab) nextTab.click();
        }
    });
</script>
""", unsafe_allow_html=True)

if 'current_tab' not in st.session_state:
    st.session_state.current_tab = 0

def on_tab_change():
    st.session_state.current_tab = st.session_state.get('current_tab', 0)


def perform_analysis_with_progress():
    progress_bar = st.progress(0)
    for i in range(100):
        # Perform analysis steps
        progress_bar.progress(i + 1)
    progress_bar.empty()

if st.sidebar.button('üîÑ Rafra√Æchir les Donn√©es'):
    st.cache_data.clear()
    st.experimental_rerun()

theme = st.sidebar.selectbox(
    'üé® Th√®me',
    ['Light', 'Dark'],
    key='theme'
)

if theme == 'Dark':
    st.markdown("""
    <style>
        .stApp {
            background-color: #1E1E1E;
            color: #FFFFFF;
        }
        .stTabs [data-baseweb="tab"] {
            background-color: #2D2D2D;
        }
    </style>
    """, unsafe_allow_html=True)

def show_data_summary(df):
    st.sidebar.markdown("### üìä R√©sum√© des Donn√©es")
    st.sidebar.markdown(f"**Nombre d'observations:** {len(df)}")
    st.sidebar.markdown(f"**Nombre de variables:** {len(df.columns)}")
    st.sidebar.markdown(f"**P√©riode d'analyse:** {df['Date'].min()} - {df['Date'].max()}")

@st.cache_data(ttl=3600, show_spinner=True)
def get_data_version():
    return datetime.now().strftime("%Y%m%d_%H%M%S")

@st.cache_data(ttl=3600)
def load_data_with_version(version):
    df = load_data()
    return validate_and_clean_data(df)


import time

def track_performance(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        execution_time = time.time() - start_time
        st.sidebar.markdown(f"‚ö° Temps d'ex√©cution: {execution_time:.2f}s")
        return result
    return wrapper


def export_formatted_results(df, filename):
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='R√©sultats')
        workbook = writer.book
        worksheet = writer.sheets['R√©sultats']
        
        # Add formatting
        header_format = workbook.add_format({
            'bold': True,
            'bg_color': '#0066cc',
            'font_color': 'white'
        })
        
        for col_num, value in enumerate(df.columns.values):
            worksheet.write(0, col_num + 1, value, header_format)
    
    return buffer.getvalue()

def show_help(section):
    help_content = {
        'analyse_univariee': "Cette section pr√©sente l'analyse descriptive des variables individuelles...",
        'analyse_bivariee': "Cette section explore les relations entre paires de variables...",
        'correlations': "Cette section pr√©sente les corr√©lations entre les diff√©rentes dimensions...",
        'regression': "Cette section permet d'analyser les relations causales entre variables..."
    }
    
    with st.expander(" Aide", expanded=False):
        st.markdown(help_content.get(section, "S√©lectionnez une section pour voir l'aide"))
